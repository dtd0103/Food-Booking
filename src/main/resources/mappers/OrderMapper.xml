<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dtdat.javaweb.exam.mapper.OrderMapper">

	<resultMap id="orderResultMap" type="com.dtdat.javaweb.exam.entity.Order">
		<id property="id" column="o_id" />
		<result property="userName" column="o_user_name" />
		<result property="phoneNumber" column="o_phone_number" />
		<result property="wardId" column="o_ward_id" />
		<result property="street" column="o_street" />
		<result property="message" column="o_message" />
		<result property="total" column="o_total" />
		<result property="shippingFee" column="o_shipping_fee" />
		<result property="createdAt" column="o_created_at" />
		<result property="state" column="o_state" />
		<association property="ward"
			javaType="com.dtdat.javaweb.exam.entity.Ward">
			<id property="id" column="w_id" />
			<result property="name" column="w_name" />
			<result property="cityId" column="w_city_id" />
			<result property="shippingFee" column="w_shipping_fee" />
			<association property="city"
				javaType="com.dtdat.javaweb.exam.entity.City">
				<id property="id" column="c_id" />
				<result property="name" column="c_name" />
			</association>
		</association>
		<collection property="items"
			ofType="com.dtdat.javaweb.exam.entity.OrderDetail"
			autoMapping="true">
			<id property="id" column="od_id" />
			<result property="orderId" column="od_order_id" />
			<result property="foodId" column="od_food_id" />
			<result property="quantity" column="od_quantity" />
			<association property="food"
				javaType="com.dtdat.javaweb.exam.entity.Food">
				<id property="id" column="f_id" />
				<result property="type" column="f_type" />
				<result property="image" column="f_image" />
				<result property="name" column="f_name" />
				<result property="description" column="f_description" />
				<result property="price" column="f_price" />
				<result property="status" column="f_status" />
			</association>
		</collection>
	</resultMap>

	<sql id="orderColumns">
		o.id AS o_id,
		o.user_name AS o_user_name,
		o.phone_number AS o_phone_number,
		o.ward_id AS o_ward_id,
		o.street AS o_street,
		o.message AS o_message,
		o.total AS o_total,
		o.shipping_fee AS o_shipping_fee,
		o.created_at AS o_created_at,
		o.state AS o_state,
		w.id AS w_id,
		w.name AS w_name,
		w.city_id AS w_city_id,
		w.shipping_fee AS w_shipping_fee,
		c.id AS c_id,
		c.name AS c_name
	</sql>

	<select id="getDashboardSummary" resultType="map">
		SELECT
		COALESCE(SUM(CASE WHEN o.created_at 
		BETWEEN #{todayStart} AND #{todayEnd}
		AND o.state != 'cancel'
		THEN (o.total + o.shipping_fee) ELSE 0 END), 0) AS todaySales,
		COUNT(CASE WHEN o.state != 'new' THEN o.id ELSE NULL END) AS totalOrders,
		COUNT(CASE WHEN o.state = 'shipping' THEN 1 ELSE NULL END) AS shippingOrders,
		COUNT(CASE WHEN o.state = 'completed' THEN 1 ELSE NULL END) AS completedOrders,
		COUNT(CASE WHEN o.state = 'cancel' THEN 1 ELSE NULL END) AS cancelledOrders
		FROM
		`orders` o
	</select>

	<select id="getSalesChartData" resultType="map"> SELECT <choose>
			<when test="period == 'day'">
				DATE(created_at) AS label
			</when>
			<when test="period == 'month'">
				DATE_FORMAT(created_at, '%Y-%m') AS label
			</when>
			<otherwise>
				DATE(created_at) AS label
			</otherwise>
		</choose> ,
		SUM(total) AS value FROM `orders` WHERE created_at BETWEEN #{startDate}
		AND #{endDate} GROUP BY label ORDER BY label ASC </select>
		
	<select id="getOrders" resultMap="orderResultMap"> 
		SELECT 
		<include refid="orderColumns" />, 
		od.id AS od_id,
		od.order_id AS od_order_id,
		od.food_id AS od_food_id,
		od.quantity AS od_quantity,
		f.id AS f_id,
		f.type AS f_type,
		f.image AS f_image,
		f.name AS f_name,
		f.description AS
		f_description,
		f.price AS f_price,
		f.status AS f_status
		FROM `orders` o
		INNER JOIN 
		( SELECT 
		o_inner.id FROM `orders` o_inner
		LEFT JOIN order_detail od_inner
		ON o_inner.id = od_inner.order_id
		LEFT JOIN food f_inner
		ON od_inner.food_id = f_inner.id
		<where>
			<if test="status != null and status.size > 0"> AND o_inner.state IN
				<foreach item="item" collection="status" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="startDate != null">
				AND o_inner.created_at &gt;= #{startDate}
			</if>
			<if test="endDate != null">
				AND o_inner.created_at &lt;= #{endDate}
			</if>
			<if test="search != null and search != ''">
				AND (
				o_inner.id LIKE CONCAT('%', #{search}, '%') OR
				o_inner.user_name LIKE CONCAT('%', #{search}, '%') OR
				o_inner.phone_number LIKE CONCAT('%', #{search}, '%') OR
				o_inner.street LIKE CONCAT('%', #{search}, '%') OR
				o_inner.message LIKE CONCAT('%', #{search}, '%') OR
				f_inner.name LIKE CONCAT('%', #{search}, '%')
				)
			</if>
		</where>
		GROUP BY o_inner.id ORDER BY <choose>
			<when test="sortBy == 'createdAt'">
				o_inner.created_at
			</when>
			<when test="sortBy == 'total'">
				o_inner.total
			</when>
			<otherwise>
				o_inner.created_at
			</otherwise>
		</choose>
			<if
				test="sortDir == 'desc'">DESC</if>
			<if test="sortDir == 'asc'">ASC</if>
			<if test="limit != null and limit != ''">
				LIMIT #{limit}
			</if>
			<if test="offset != null and offset != ''">
				OFFSET #{offset}
			</if> ) AS limited_orders ON o.id =
				limited_orders.id LEFT JOIN ward w ON o.ward_id = w.id LEFT JOIN city c
				ON w.city_id = c.id LEFT JOIN order_detail od ON o.id = od.order_id LEFT
				JOIN food f ON od.food_id = f.id ORDER BY
		<choose>
			<when test="sortBy == 'createdAt'">
				o.created_at
			</when>
			<when test="sortBy == 'total'">
				o.total
			</when>
			<otherwise>
				o.created_at
			</otherwise>
		</choose>
		<choose>
			<when test="sortDir == 'desc'">DESC</when>
			<when test="sortDir == 'asc'">ASC</when>
			<otherwise>DESC</otherwise> 
		</choose>
	</select>

	<select id="countOrders" resultType="int"> 
		SELECT COUNT(DISTINCT o.id)
		FROM `orders` o
		LEFT JOIN
		order_detail od
		ON o.id = od.order_id
		LEFT JOIN
		food f ON od.food_id = f.id 
		<where>
			<if test="status != null and status.size > 0"> AND o.state IN
				<foreach item="item" collection="status" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="startDate != null">
				AND o.created_at &gt;= #{startDate}
			</if>
			<if test="endDate != null">
				AND o.created_at &lt;= #{endDate}
			</if>
			<if test="search != null and search != ''">
				AND (
				o.id LIKE CONCAT('%', #{search}, '%') OR
				o.user_name LIKE CONCAT('%', #{search}, '%') OR
				o.phone_number LIKE CONCAT('%', #{search}, '%') OR
				o.street LIKE CONCAT('%', #{search}, '%') OR
				o.message LIKE CONCAT('%', #{search}, '%') OR
				f.name LIKE CONCAT('%', #{search}, '%')
				)
			</if>
		</where>
	</select>

	<select id="getOrderById" resultMap="orderResultMap"> 
		SELECT <include refid="orderColumns" />, 
		od.id AS od_id,
		od.order_id AS od_order_id,
		od.food_id AS od_food_id,
		od.quantity AS od_quantity,
		f.id AS f_id,
		f.type AS f_type,
		f.image AS f_image,
		f.name AS f_name,
		f.description AS
		f_description,
		f.price AS f_price,
		f.status AS f_status
		FROM `orders` o
		LEFT JOIN ward w
		ON o.ward_id = w.id
		LEFT JOIN city c ON w.city_id =c.id
		LEFT JOIN order_detail od
		ON o.id = od.order_id
		LEFT JOIN food f ON
		od.food_id = f.id
		WHERE o.id = #{id}
	</select>

	<insert id="insertOrder" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO `orders`
		(user_name,
		phone_number,
		ward_id,
		street,
		message,
		total,
		shipping_fee,
		created_at,
		state)
		VALUES (
		#{userName},
		#{phoneNumber},
		#{wardId},
		#{street},
		#{message},
		#{total},
		#{shippingFee},
		NOW(), 'new' )
	</insert>

	<insert id="insertOrderItems"> 
		INSERT INTO order_detail
		(order_id, food_id,
		quantity) VALUES
		<foreach collection="items" item="item" separator=",">
			(#{orderId},
			#{item.foodId},
			#{item.quantity})
		</foreach>
	</insert>

	<update id="updateOrderState">
		UPDATE `orders`
		SET state = #{newState}
		WHERE id = #{orderId}
	</update>

</mapper>